# 643. Maximum Average Subarray I
// https://leetcode.com/problems/maximum-average-subarray-i/description/

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum =0;
        int max = Integer.MIN_VALUE;
        int i =0, j =0;
        while(j<k) {
            sum += nums[j++];
        }

        max = sum;
        while(j<nums.length) {
            sum = sum + nums[j] - nums[i];
            max = Math.max(sum,max);
            i++;
            j++;
        }
        
        return (double)max/k;
    }
}

# 121. Best Time to Buy and Sell Stock
// https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

class Solution {
    public int maxProfit(int[] prices) {
        int j =0, profit =0;
        int maxProfit = Integer.MIN_VALUE;
        int minValue = Integer.MAX_VALUE;

        while(j<prices.length) {
            minValue = Math.min(minValue, prices[j]);
            profit = prices[j] - minValue;
            maxProfit = Math.max(maxProfit, profit);
            j++;
        }
        return maxProfit;
    }
}