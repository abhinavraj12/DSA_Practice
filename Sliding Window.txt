# 643. Maximum Average Subarray I
// https://leetcode.com/problems/maximum-average-subarray-i/description/

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum =0;
        int max = Integer.MIN_VALUE;
        int i =0, j =0;
        while(j<k) {
            sum += nums[j++];
        }

        max = sum;
        while(j<nums.length) {
            sum = sum + nums[j] - nums[i];
            max = Math.max(sum,max);
            i++;
            j++;
        }
        
        return (double)max/k;
    }
}

# 121. Best Time to Buy and Sell Stock
// https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

class Solution {
    public int maxProfit(int[] prices) {
        int j =0, profit =0;
        int maxProfit = Integer.MIN_VALUE;
        int minValue = Integer.MAX_VALUE;

        while(j<prices.length) {
            minValue = Math.min(minValue, prices[j]);
            profit = prices[j] - minValue;
            maxProfit = Math.max(maxProfit, profit);
            j++;
        }
        return maxProfit;
    }
}

#219. Contains Duplicate II
//https://leetcode.com/problems/contains-duplicate-ii/description/

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i =0;i<nums.length;i++){
            if(map.containsKey(nums[i])) {
                int idx = map.get(nums[i]);
                if(Math.abs(i - idx) <= k) {
                    return true;
                } else {
                    map.put(nums[i], i);
                }
            } else{
                map.put(nums[i], i);
            }
        }
        return false;
    }
}

// 2nd Method Sliding Window using SET


class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashSet<Integer> set = new HashSet<>();

        for(int i =0;i<nums.length;i++) {
            if(set.contains(nums[i])) {
                return true;
            }
            set.add(nums[i]);

            if(set.size() > k) {
                set.remove(nums[i-k]);
            }
        }
        return false;        
    }
}

# 1695. Maximum Erasure Value
// https://leetcode.com/problems/maximum-erasure-value/description/

class Solution {
    public int maximumUniqueSubarray(int[] nums) {

        HashSet<Integer> set = new HashSet<>();

        int i =0, j =0;
        int sum =0;
        int max = Integer.MIN_VALUE;

        while(j < nums.length) {
            if(!set.contains(nums[j])){
                set.add(nums[j]);
                sum += nums[j];
                max  = Math.max(max, sum);
                j++;
            } else {
                set.remove(nums[i]);
                sum -= nums[i];
                i++;
            }
        }
        return max;
    }
}

# 3. Longest Substring Without Repeating Characters
// https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character>set=new HashSet<>();
        int maxLength=0;
        int left=0;
        for(int right=0;right<s.length();right++){
           
            if(!set.contains(s.charAt(right))){
                set.add(s.charAt(right));
                maxLength=Math.max(maxLength,right-left+1);
                
            }else{
                while(s.charAt(left)!=s.charAt(right)){
                    set.remove(s.charAt(left));
                    left++;
                }
                set.remove(s.charAt(left));left++;
                set.add(s.charAt(right));
            }
            
        }
        return maxLength;
    }
}

# 2090. K Radius Subarray Averages
// https://leetcode.com/problems/k-radius-subarray-averages/description/

class Solution {
    public int[] getAverages(int[] nums, int k) {
        int i =0;
        long sum =0;
        int window = 2*k +1;

        int[] ans = new int[nums.length];
        java.util.Arrays.fill(ans, -1);

        for(int j =0;j<nums.length;j++) {
            sum += nums[j];
            if(j-i +1 == window) {
                ans[i+k] = (int)(sum/window);
                sum -= nums[i];
                i++;
            }
        }
       return ans;
    }
}


# 209. Minimum Size Subarray Sum
// https://leetcode.com/problems/minimum-size-subarray-sum/description/

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int ans = Integer.MAX_VALUE; 
        int sum = 0;
        int left =0; 
        for(int right =0;right<nums.length;right++) {
            sum += nums[right];
            while(sum >= target) {
                ans = Math.min(ans, right - left +1);
                sum -= nums[left];
                left ++;
            }
        }
        return ans == Integer.MAX_VALUE ? 0 : ans;

    }
}