#26. Remove Duplicates from Sorted Array
//https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/

Solution:

class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;

        int i = 0; // Pointer to place the next unique element
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {
                i++; // Move pointer forward
                nums[i] = nums[j]; // Place the unique element
            }
        }
        return i + 1; // Total number of unique elements
    }
}

#344. Reverse String
// https://leetcode.com/problems/reverse-string/submissions/

class Solution {
    public void reverseString(char[] s) {
        int l = 0;
        int r = s.length-1;

        while(l<r) {
            char temp = s[l];
            s[l] = s[r];
            s[r] = temp;
            l++;
            r--;
        }
    }
}

# 27. Remove Element
//https://leetcode.com/problems/remove-element/description/

class Solution {
    public int removeElement(int[] nums, int val) {
       int k =0;
       for(int i =0;i<nums.length;i++) {
        if(nums[i] != val) {
            nums[k] = nums[i];
            k++;
        }
       }
       return k;
    }
}

#88. Merge Sorted Array
//https://leetcode.com/problems/merge-sorted-array/description/

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        int p1 = m, p2 =0;

        while(p2<n) {
            nums1[p1] = nums2[p2];
            p1++;
            p2++;
        }
        Arrays.sort(nums1);
    }
}